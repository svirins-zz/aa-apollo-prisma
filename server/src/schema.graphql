type User {
	id:           ID!
	name:         String!      
	email:        String!      
	password:     String!
	groups:       [Group!] 
  events:       [Event!]
}

type Group {
  id:            ID!
  author:        User!         
  name:          String!       
  description:   String!       
  city:          String!
  region:        regionType! 
  isActive:      Boolean
  phone:         String
  email:         String
  address:       String
  meetings:      [Meeting!]  
  location:      Location! 
}

type Meeting {
  id:           ID! 
  group:        Group!        
  name:         String!       
  weekday:      Weekday!
  time:         DateTime!
  type:         meetingType
}

type Event {
  id:           ID!   
  author:       User!             
  name:         String!        
  date:         DateTime!     
  city:         String!
  description:  String!       
  agenda:       String
  contact:      String
}

type Location {
  id:           ID! 
  lattitude:     Float!
  longitude:    Float!
}

scalar DateTime

enum Weekday {
  Mo
  Tu
  We
  Th
  Fr
  Sa
  Su
}

enum meetingType {
  Open
  Closed 
}

enum regionType {
  Minskaya
  Brestskaya
  Gomelskaya
  Mogilevskaya
  Grodnenskaya
  Vitebskaya
}

type Query {
  groupList(filter: String, skip: Int, first: Int, orderBy: GroupOrderByInput, regionSelect: regionType, activeFilter: Boolean): GroupFeed!
  eventList(filter: String, skip: Int, first: Int, orderBy: EventOrderByInput): EventFeed!
}

type GroupFeed {
  groups: [Group!]!
  count: Int!
}

type EventFeed {
  events: [Event!]!
  count: Int!
}

type Mutation {
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
}

type AuthPayload {
  token: String
  user: User
}

enum GroupOrderByInput {
  name_ASC
  name_DESC
  city_ASC
  city_DESC
  region_ASC
  region_DESC
}

enum EventOrderByInput {
  date_ASC
  date_DESC
  city_ASC
  city_DESC
}
